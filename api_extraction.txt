================================================================================
CLAUDE API IMPLEMENTATIONS
================================================================================

--- Match 1 for pattern: .{0,300}https://claude\.ai/api/organizations.{0,80... ---
temMessage}get name(){return`Claude (API/${this.config.claudeApiModel})`}get supportsImageInput(){return!0}}globalThis.jotaiAtomCache=globalThis.jotaiAtomCache||{cache:new Map,get(e,t){return this.cache.has(e)?this.cache.get(e):(this.cache.set(e,t),t)}};async function K0t(){let e;try{e=await fetch("https://claude.ai/api/organizations",{redirect:"error",cache:"no-cache"})}catch{throw new pn("Claude webapp not avaiable in your country",xn.CLAUDE_WEB_UNAVAILABLE)}if(e.status===403)throw new pn("Please sign in to your Claude account",xn.CLAUDE_WEB_UNAUTHORIZED);const t=await e.json(),n=t.filter(r=>r.capabilities.includes("chat"))[0];return n?n.uuid:t[0].uuid}async function Y0t(e){const t=Ts();try{await fn(`https://claude.ai/api/organizations/${e}/chat_conversations`,{method:"POST",body:{name:"",uuid:t}})}catch(n){throw n instanceof hm&&n.status===403?new pn("There is no logged-in Claude account in this browser.",xn.CLAUDE_WEB_UNAUTHORIZED):n}return t}async function Z0t(e,t,n){await fn(`htt

--- Match 2 for pattern: .{0,300}https://claude\.ai/api/organizations.{0,80... ---
his.organizationId||(this.organizationId=await K0t());const r=[];if(n.image){const{file_uuid:s}=await X0t(this.organizationId,n.image);r.push(s)}if(!this.context){const s=await Y0t(this.organizationId);this.context={conversationId:s},Z0t(this.organizationId,s,n.prompt).catch(console.error)}const i=`https://claude.ai/api/organizations/${this.organizationId}/chat_conversations/${this.context.conversationId}/completion`,o=await fetch(i,{method:"POST",signal:n.signal,headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:n.prompt,files:r,rendering_mode:"raw",attachments:[]})});let a="";await _0(o,s=>{const l=JSON.parse(s);if(l.completion)a+=l.completion,n.onEvent({type:"UPDATE_ANSWER",data:{parts:[{type:"text",text:egt(a.trimStart())}]}});else if(l.error)throw new Error(JSON.stringify(l.error))}),n.onEvent({type:"DONE"})}resetConversation(){this.context=void 0}get name(){return"Claude (webapp)"}get supportsImageInput(){return!0}}function Ap(e){var t,n;return(n=(t=e==null?v

--- Match 1 for pattern: organizationId.{0,500}completion.{0,500}... ---
organizationId");vi(this,"context")}async doSendMessage(n){this.organizationId||(this.organizationId=await K0t());const r=[];if(n.image){const{file_uuid:s}=await X0t(this.organizationId,n.image);r.push(s)}if(!this.context){const s=await Y0t(this.organizationId);this.context={conversationId:s},Z0t(this.organizationId,s,n.prompt).catch(console.error)}const i=`https://claude.ai/api/organizations/${this.organizationId}/chat_conversations/${this.context.conversationId}/completion`,o=await fetch(i,{method:"POST",signal:n.signal,headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:n.prompt,files:r,rendering_mode:"raw",attachments:[]})});let a="";await _0(o,s=>{const l=JSON.parse(s);if(l.completion)a+=l.completion,n.onEvent({type:"UPDATE_ANSWER",data:{parts:[{type:"text",text:egt(a.trimStart())}]}});else if(l.error)throw new Error(JSON.stringify(l.error))}),n.onEvent({type:"DONE"})}resetConversation(){this.context=void 0}get name(){return"Claude (webapp)

================================================================================
PERPLEXITY API IMPLEMENTATIONS
================================================================================

--- Match 1 for pattern: .{0,300}perplexity\.ai/rest/sse.{0,800}... ---
omCache=globalThis.jotaiAtomCache||{cache:new Map,get(e,t){return this.cache.has(e)?this.cache.get(e):(this.cache.set(e,t),t)}};class jyt extends pu{constructor(n){super();vi(this,"conversationContext");this.model=n,this.conversationContext={}}async doSendMessage(n){const r=await fetch("https://www.perplexity.ai/rest/sse/perplexity_ask",{method:"POST",signal:n.signal,headers:{"Content-Type":"application/json"},body:JSON.stringify({params:{search_focus:"internet",sources:["web"],last_backend_uuid:this.conversationContext.lastBackendUuid,mode:"copilot",model_preference:"pplx_pro",supported_block_use_cases:[],version:"2.18"},query_str:n.prompt})});await _0(r,i=>{const o=JSON.parse(i);if(o.final_sse_message){this.conversationContext.lastBackendUuid=o.backend_uuid;const s=JSON.parse(o.text).find(u=>u.step_type==="FINAL").content.answer,{answer:l}=JSON.parse(s);l&&n.onEvent({type:"UPDATE_ANSWER",data:{parts:[{type:"text",text:l}]}})}}),n.onEvent({type:"DONE"})}resetConversation(){this.conver

--- Match 1 for pattern: .{0,300}www\.perplexity\.ai.{0,800}... ---
aiAtomCache=globalThis.jotaiAtomCache||{cache:new Map,get(e,t){return this.cache.has(e)?this.cache.get(e):(this.cache.set(e,t),t)}};class jyt extends pu{constructor(n){super();vi(this,"conversationContext");this.model=n,this.conversationContext={}}async doSendMessage(n){const r=await fetch("https://www.perplexity.ai/rest/sse/perplexity_ask",{method:"POST",signal:n.signal,headers:{"Content-Type":"application/json"},body:JSON.stringify({params:{search_focus:"internet",sources:["web"],last_backend_uuid:this.conversationContext.lastBackendUuid,mode:"copilot",model_preference:"pplx_pro",supported_block_use_cases:[],version:"2.18"},query_str:n.prompt})});await _0(r,i=>{const o=JSON.parse(i);if(o.final_sse_message){this.conversationContext.lastBackendUuid=o.backend_uuid;const s=JSON.parse(o.text).find(u=>u.step_type==="FINAL").content.answer,{answer:l}=JSON.parse(s);l&&n.onEvent({type:"UPDATE_ANSWER",data:{parts:[{type:"text",text:l}]}})}}),n.onEvent({type:"DONE"})}resetConversation(){this.co

================================================================================
LOOKING FOR CLASS DEFINITIONS
================================================================================
